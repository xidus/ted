# Cross validation (cv) options
# -----------------------------

cv:
  # Type :: int
  N_folds: 5
  # N_folds: 10

  # Default experiment to run
  # Type :: str
  exp_default: any


# Load options for CutoutSequence (cs) instances
# -----------------------------------------

cs:

  # Accepted qualities to load
  # Can also be set directly
  # Type :: list
  # Options :: [1, 2, 3]
  quality: [1, 2, 3]
  # quality: [3]

  # How much of the border of the frames to clip?
  # Type :: int
  clip: 10

  # Which backround model to use?
  # Type :: str
  # Options :: [median, mean]
  bg_model: median

  # Which cutout size to use?
  # Status :: NotImplemented
  # Type :: list
  # size: [101, 101]

  # How to create the residuals?
  # Status :: NotImplemented
  # Type :: str
  # residual: naive
  # residual: hotpants


# Experiment options
# ------------------

xp:

  # Experiment 1
  any:

    # Scale to smooth to
    # Type :: dict
    # sigmas: &sigmas
    #   start: 1
    #   stop: 5
    #   num: 5
    sigmas: &sigmas
      start: 3
      stop: 15
      num: 13

    # Relative thresholds
    # Type :: dict
    # taus: &taus
    #   start: .0
    #   stop: 1.
    #   num: 50
    taus: &taus
      # This gives 60 choices for tau 
      start: .7
      stop: .995
      # num: 21
      step: .005

  # Experiment 1 -- new grid on the bloc
  any2:

    # Scale to smooth to
    # Type :: dict
    sigmas: &sigmas2
      start: 3
      stop: 15
      num: 13

    # Relative thresholds
    # Type :: dict
    taus: &taus2
      start: .7
      stop: .995
      num: 21

  # Experiment 2
  many:

    sigmas: *sigmas
    taus: *taus

  # Experiment 3
  manyc:

    sigmas: *sigmas
    taus: *taus


  # BASELINE EXPERIMENT
  # -------------------

  # RANDOM
  blr:
    sigmas: *sigmas
    taus: *taus

  # ALWAYS
  bla:
    sigmas: *sigmas
    taus: *taus

  # NEVER
  bln:
    sigmas: *sigmas
    taus: *taus

  # BASELINE EXPERIMENT -- new grid on the bloc
  # -------------------

  # RANDOM 2
  blr2:
    sigmas: *sigmas2
    taus: *taus2

  # ALWAYS 2
  bla2:
    sigmas: *sigmas2
    taus: *taus2

  # NEVER 2
  bln2:
    sigmas: *sigmas2
    taus: *taus2
